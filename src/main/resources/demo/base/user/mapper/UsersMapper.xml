<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="demo.base.user.mapper.UsersMapper">

  <resultMap id="BaseResultMap" type="demo.base.user.pojo.po.Users">
    <result column="user_id" jdbcType="BIGINT" property="userId" />
    <result column="user_name" jdbcType="CHAR" property="userName" />
    <result column="pwd" jdbcType="CHAR" property="pwd" />
    <result column="enabled" jdbcType="BIT" property="enabled" />
    <result column="account_non_locked" jdbcType="BIT" property="accountNonLocked" />
    <result column="account_non_locked" jdbcType="BIT" property="accountNonExpired" />
    <result column="credentials_non_expired" jdbcType="BIT" property="credentialsNonExpired" />
    <result column="pwdd" jdbcType="CHAR" property="pwdd" />
  </resultMap>

  <insert id="insertFailAttempts" parameterType="String">
    insert into 
      user_attempts(
      user_id, 
      user_name
      ) 
    values( 
      (select user_id from users where user_name = #{userName}),
      #{userName}
      )
  </insert>
  
  <update id="setLockeds" parameterType="demo.base.user.pojo.po.Users">
    update 
      users 
    <trim prefix="SET" suffixOverrides=",">
      <if test="enabled != null">
        enabled = #{enabled},
      </if>
      <if test="accountNonLocked != null">
        account_non_locked = #{accountNonLocked},
      </if>
      <if test="accountNonExpired != null">
        account_non_expired = #{accountNonExpired},
      </if>
      <if test="credentialsNonExpired != null">
        credentials_non_expired = #{credentialsNonExpired},
      </if>
    </trim>
    where
      user_name = #{userName}
  </update>

  <update id="resetFailAttempts" parameterType="String">
    update 
      user_attempts 
    set 
      statu = 0 
    <where>
      <if test="userName != null">
        and user_name = #{userName}
      </if>
      <if test="userId != null">
        and user_id = #{userId}
      </if>
    </where>
  </update>

  <select id="getUserAttempts"
    resultMap="demo.base.user.mapper.UserAttemptsMapper.BaseResultMap">
    select 
      ua.*
      
    from 
      user_attempts as ua

      right join users
        on ua.user_id = users.user_id

    <where>
      ua.statu = 1
      <if test="userName != null">
        and ua.user_name = #{userName}
      </if>
      <if test="userId != null">
        and ua.user_id = #{userId}
      </if>
    </where>
  </select>

  <delete id="cleanAttempts" parameterType="java.util.Date" >
    delete from user_attempts  
    <where> 
      statu = 0
      <if test="dateInput != null">
        and attempt_time &lt; #{dateInput}
      </if>
      <if test="dateInput == null">
        and attempt_time &lt; date_sub(now(), interval 1 month)
      </if>
    </where>
  </delete>

  <update id="lockUserWithAttempts" parameterType="String" >
    update 
      users 
    set 
      enabled = 0, 
      account_non_locked = 0
    where 
      user_name = #{userName};
  </update>

  <update id="resetPassword">
    update 
      users
    set
      pwd = #{pwd},
      pwdd = #{pwdd}
    where 
      user_id = #{userId}
  </update>
  
  <select id="findUser" resultMap="BaseResultMap">
    select * from users where user_id = #{userId}
  </select>

  <select id="loadUserByUserName" resultMap="BaseResultMap">
    select 
      user_id, 
      user_name, 
      pwd, 
      enabled, 
      account_non_locked as accountNonLocked, 
      account_non_expired as accountNonExpired, 
      credentials_non_expired as credentialsNonExpired 
    from 
      users 
    where 
      user_name = #{userName}
  </select>

  <select id="getUserIdByUserName" resultType="Long">
    select user_id from users where user_name = #{userName}
  </select>

  <select id="getUserIdByUserNameOrEmail" resultType="Long">
    select
      users.user_id
    from
      users
      left join users_detail as ud
        on users.user_id = ud.user_id
    where
      users.user_name = #{inputUserName}
      or ud.email = #{inputUserName}
  </select>

  <select id="getUserDetailByUserName" resultMap="demo.base.user.mapper.UsersDetailMapper.BaseResultMap">
    select
      ud.user_id,
      ud.nick_name,
      ud.email
    from
      users
      left join users_detail as ud
        on users.user_id = ud.user_id
    where
      users.user_name = #{inputUserName}
  </select>

  <select id="countAttempts" resultType="int">
    select 
      count(*) 
    from 
      user_attempts as ua

      right join users
        on ua.user_id = users.user_id

    where 
      ua.statu = 1
      and users.user_name = #{userName}
  </select>

  <select id="matchUserPassword" resultType="int">
    select exists( 
      select 
        1
      from 
        users
      where
        user_id = #{userId}
        and pwd = #{pwd}
    )
  </select>

  <select id="findUserByUserName" resultMap="BaseResultMap">
    select * from users where user_name = #{userName}
  </select>

  <!-- <select id="findMyUserPrincipalByUserId" resultType="demo.base.user.pojo.bo.MyUserPrincipal">
    select
      users.*

    from
      users 
      left join user_auth as ua
        on users.user_id = ua.user_id

      left join auth as a
        on ua.auth_id = a.id

      left join auth_role as ar
        on ua.auth_id = ar.auth_id

    where
      users.is_delete = false
      and ua.is_delete = false
      and a.is_delete = false
      and ar.is_delete = false
  </select> -->

  <select id="atLeastOneSuperAdministratorUser" resultType="int">
    select exists(
      select 
        1
      from
        users as u

        left join user_auth as ua
          on u.user_id = ua.user_id

        left join auth as a
          on ua.auth_id = a.id

      <where>
        1=1
        and a.is_delete = false
        and a.auth_type = #{authType}
        and a.auth_name = #{authName}
        and ua.is_delete = false
        and u.enabled = true
        and u.account_non_locked = true
        and u.account_non_locked = true
        and u.credentials_non_expired = true
      </where>
    )
  </select>

</mapper>